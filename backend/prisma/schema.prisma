generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Company {
  id        String    @id @default(uuid())
  name      String
  login     String    @unique
  logoUrl   String?
  vacancies Vacancy[] // связь один ко многим
}

model User {
  id        String  @id @default(uuid())
  name      String
  login     String  @unique
  avatarUrl String?

  // contacts
  phone    String?
  email    String?
  telegram String?

  resume Resume?
}

model Resume {
  id              String          @id @default(uuid())
  title           String
  description     String?
  salaryFrom      Int?
  salaryTo        Int?
  location        String?
  pdfUrl          String?
  tags            ResumeTag[]
  experienceLevel ExperienceLevel

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId       String        @unique
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  applications Application[]
}

model Vacancy {
  id              String          @id @default(uuid())
  title           String
  description     String?
  salaryFrom      Int?
  salaryTo        Int?
  employmentType  EmploymentType
  experienceLevel ExperienceLevel
  location        String?
  isRemote        Boolean         @default(false)
  isActive        Boolean         @default(true)
  tags            VacancyTag[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  status          VacancyStatus   @default(MODERATION)
  closeDate       DateTime?

  // Связь с Company
  companyId    String?
  company      Company?      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  applications Application[]
}

model Application {
  id        String            @id @default(uuid())
  resumeId  String
  vacancyId String
  status    ApplicationStatus @default(PENDING)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  note      String? // необязательный комментарий к отклику

  resume  Resume  @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  vacancy Vacancy @relation(fields: [vacancyId], references: [id], onDelete: Cascade)

  @@unique([resumeId, vacancyId]) // чтобы один резюме мог откликнуться на вакансию только один раз
}

model Tag {
  id        String       @id @default(uuid())
  name      String       @unique
  vacancies VacancyTag[]
  resumes   ResumeTag[]
}

model VacancyTag {
  vacancyId String
  tagId     String
  vacancy   Vacancy @relation(fields: [vacancyId], references: [id], onDelete: Cascade)
  tag       Tag     @relation(fields: [tagId], references: [id])

  @@id([vacancyId, tagId])
}

model ResumeTag {
  resumeId String
  tagId    String
  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  tag      Tag    @relation(fields: [tagId], references: [id])

  @@id([resumeId, tagId])
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
}

enum ExperienceLevel {
  INTERN
  JUNIOR
  MIDDLE
  SENIOR
  LEAD
}

enum ApplicationStatus {
  PENDING
  INTERVIEW
  ACCEPTED
  REJECTED
}

enum VacancyStatus {
  ACTIVE
  MODERATION
  CLOSED
}
